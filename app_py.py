# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gj2N_D9PQalDLLQI29tOaQQSTpZ0e2qK
"""

# 1. Install libraries
!pip install gradio aiohttp python-dotenv

# 2. Set your OpenRouter API key
import os
os.environ["OPENROUTER_API_KEY"] = ""

import os
import asyncio
import aiohttp
import gradio as gr
import json
import re
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import logging
import base64
import io
from flask import Flask, jsonify
import threading

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class PostRequest:
    """Data class to hold post generation request parameters"""
    topic: str
    tone: str = "professional"
    audience: str = "general professionals"
    hashtags: str = ""
    cta: str = ""
    length: str = "medium"
    num_posts: int = 3

@dataclass
class GeneratedPost:
    """Data class to hold generated post information"""
    content: str
    agent_style: str
    hashtags: List[str]
    cta: str
    image_prompt: str = ""
    image_url: str = ""
    is_filtered: bool = False
    filter_reason: str = ""
    token_count: int = 0
    generation_time: float = 0.0

@dataclass
class GenerationStats:
    """Data class to hold generation statistics"""
    total_tokens: int
    total_time: float
    cost_estimate: float
    posts_generated: int

class ContentFilter:
    """Enhanced content filtering class"""

    def __init__(self):
        self.profanity_patterns = [
            r'\b(damn|hell|crap|shit|fuck|bitch|ass)\b',
            r'\b(stupid|idiot|moron|dumb)\b'
        ]

        self.sensitive_patterns = [
            r'\b(guaranteed|100%|never fail|instant|miracle)\b',
            r'\b(get rich quick|make money fast|easy money)\b'
        ]

    def filter_content(self, content: str) -> tuple[bool, str]:
        """Filter content for inappropriate language and claims"""
        if not content or content.strip() == "":
            return False, "Empty content"

        content_lower = content.lower()

        for pattern in self.profanity_patterns:
            if re.search(pattern, content_lower, re.IGNORECASE):
                return False, "Contains inappropriate language"

        for pattern in self.sensitive_patterns:
            if re.search(pattern, content_lower, re.IGNORECASE):
                return False, "Contains potentially misleading claims"

        return True, ""

class ImageGenerator:
    """Generate images using OpenRouter's image generation models"""

    def __init__(self, api_key: str):
        self.api_key = api_key
        # Updated to use OpenRouter's image generation endpoint
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.image_model = "black-forest-labs/flux-1-schnell-free"  # Free image generation model

    async def generate_image_prompt(self, topic: str, style: str) -> str:
        """Generate image description prompt based on post topic and style"""

        topic_keywords = {
            "leadership": "professional business meeting, confident leader presenting",
            "networking": "diverse professionals shaking hands, business conference",
            "remote work": "modern home office setup, laptop and coffee",
            "innovation": "modern technology, futuristic office space",
            "career": "professional growth, climbing stairs metaphor",
            "marketing": "creative marketing campaign, colorful charts and graphs",
            "technology": "cutting-edge technology, servers and code",
            "teamwork": "collaborative team meeting, diverse group working",
            "success": "achievement celebration, trophy and growth charts",
            "productivity": "organized workspace, efficiency tools"
        }

        image_prompt = "professional business concept"
        for keyword, prompt in topic_keywords.items():
            if keyword.lower() in topic.lower():
                image_prompt = prompt
                break

        return f"{image_prompt}, professional photography, LinkedIn style, clean background, high quality, corporate aesthetic"

    async def generate_image_url(self, prompt: str) -> str:
        """Generate an actual image using OpenRouter's image generation"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
                headers = {
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://linkedin-post-generator.com",
                    "X-Title": "LinkedIn Post Generator"
                }

                payload = {
                    "model": self.image_model,
                    "messages": [
                        {
                            "role": "user",
                            "content": f"Generate a professional business image: {prompt}"
                        }
                    ],
                    "max_tokens": 100
                }

                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        # Extract image URL from response if available
                        if 'choices' in result and len(result['choices']) > 0:
                            content = result['choices'][0]['message']['content']
                            # For now, return a placeholder since image generation might not work
                            return f"data:image/svg+xml;base64,{base64.b64encode(self._create_placeholder_svg(prompt).encode()).decode()}"

                    return self._create_placeholder_image(prompt)

        except Exception as e:
            logger.error(f"Image generation failed: {str(e)}")
            return self._create_placeholder_image(prompt)

    def _create_placeholder_svg(self, prompt: str) -> str:
        """Create a professional SVG placeholder"""
        return f"""
        <svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#0a66c2;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#004182;stop-opacity:1" />
                </linearGradient>
            </defs>
            <rect width="400" height="200" fill="url(#grad1)" />
            <circle cx="200" cy="100" r="30" fill="white" opacity="0.3"/>
            <text x="200" y="110" font-family="Arial, sans-serif" font-size="16" fill="white" text-anchor="middle" font-weight="bold">
                Professional Image
            </text>
            <text x="200" y="130" font-family="Arial, sans-serif" font-size="12" fill="white" text-anchor="middle" opacity="0.8">
                {prompt[:30]}...
            </text>
        </svg>
        """

    def _create_placeholder_image(self, prompt: str) -> str:
        """Create base64 encoded placeholder image"""
        svg = self._create_placeholder_svg(prompt)
        return f"data:image/svg+xml;base64,{base64.b64encode(svg.encode()).decode()}"

class LinkedInAgent:
    """Enhanced LinkedIn agent with better content generation"""

    def __init__(self, style: str, api_key: str):
        self.style = style
        self.api_key = api_key
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.model = "anthropic/claude-3-haiku"

        self.style_prompts = {
            "professional": {
                "tone": "Write in a formal, authoritative business tone with industry insights",
                "structure": "Start with a hook, provide valuable insights, end with engagement"
            },
            "bold": {
                "tone": "Write with confidence and strong opinions that challenge conventional thinking",
                "structure": "Make bold statements, back with examples, provoke discussion"
            },
            "friendly": {
                "tone": "Write in a warm, conversational tone that builds personal connections",
                "structure": "Share personal experience, relate to audience, invite conversation"
            },
            "expert": {
                "tone": "Write with technical authority and thought leadership perspective",
                "structure": "Establish credibility, share expertise, provide actionable advice"
            },
            "concise": {
                "tone": "Write briefly and punchily, getting straight to the point",
                "structure": "Hook, key insight, clear call-to-action in minimal words"
            }
        }

    def count_tokens(self, text: str) -> int:
        """Simple token counting (roughly 4 characters = 1 token)"""
        return len(text) // 4

    def estimate_cost(self, tokens: int) -> float:
        """Estimate cost based on token count (Claude Haiku pricing)"""
        # Claude Haiku: $0.25 per 1M input tokens, $1.25 per 1M output tokens
        input_cost = tokens * 0.00000025  # Input tokens
        output_cost = tokens * 0.00000125  # Output tokens (estimated)
        return input_cost + output_cost

    async def generate_post(self, request: PostRequest) -> GeneratedPost:
        """Generate a high-quality LinkedIn post with timing and cost tracking"""

        start_time = datetime.now()
        prompt = self._build_enhanced_prompt(request)

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                headers = {
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://linkedin-post-generator.com",
                    "X-Title": "LinkedIn Post Generator"
                }

                payload = {
                    "model": self.model,
                    "messages": [{"role": "user", "content": prompt}],
                    "max_tokens": 600,
                    "temperature": 0.8,
                    "top_p": 0.9
                }

                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    generation_time = (datetime.now() - start_time).total_seconds()

                    if response.status == 200:
                        result = await response.json()

                        if 'choices' in result and len(result['choices']) > 0:
                            content = result['choices'][0]['message']['content']
                            if content and content.strip():
                                post = self._parse_response(content)
                                post.token_count = self.count_tokens(content)
                                post.generation_time = generation_time
                                return post

                        return self._create_fallback_post(request, generation_time)

                    elif response.status == 401:
                        logger.error("API key is invalid or expired")
                        return self._create_error_post("Invalid API key. Please check your OpenRouter API key.", generation_time)

                    else:
                        error_text = await response.text()
                        logger.error(f"API request failed: {response.status} - {error_text}")
                        return self._create_fallback_post(request, generation_time)

        except asyncio.TimeoutError:
            generation_time = (datetime.now() - start_time).total_seconds()
            logger.error("Request timed out")
            return self._create_error_post("Request timed out. Please try again.", generation_time)

        except Exception as e:
            generation_time = (datetime.now() - start_time).total_seconds()
            logger.error(f"Exception in post generation: {str(e)}")
            return self._create_fallback_post(request, generation_time)

    def _build_enhanced_prompt(self, request: PostRequest) -> str:
        """Build an enhanced prompt for better content generation"""

        style_config = self.style_prompts.get(self.style, self.style_prompts["professional"])

        length_guide = {
            "short": "Write 80-120 words, punchy and direct",
            "medium": "Write 150-250 words, well-developed with examples",
            "long": "Write 250-400 words, comprehensive with detailed insights"
        }

        prompt = f"""You are an expert LinkedIn content creator specializing in {self.style} posts. Create an engaging LinkedIn post about: {request.topic}

STYLE REQUIREMENTS:
- {style_config['tone']}
- {style_config['structure']}
- Target audience: {request.audience}
- {length_guide.get(request.length, 'Write 150-250 words')}

CONTENT GUIDELINES:
- Start with an attention-grabbing hook
- Provide genuine value and insights
- Use storytelling when appropriate
- Include specific examples or data points
- Write in first person for authenticity
- Use line breaks for readability
- End with an engaging question

FORMATTING REQUIREMENTS:
- Use emojis strategically (2-3 maximum)
- Break into short paragraphs (2-3 lines each)
- Make it scannable and easy to read

ADDITIONAL CONTEXT:
- Tone preference: {request.tone}
- Preferred hashtags: {request.hashtags if request.hashtags else 'Choose relevant professional hashtags'}
- Preferred CTA: {request.cta if request.cta else 'Create an engaging question'}

Please format your response as:
POST:
[Your complete LinkedIn post here]

HASHTAGS:
[5-7 relevant hashtags with # symbols]

CTA:
[Engaging call-to-action question]

IMAGE_PROMPT:
[Brief description for a professional image that would complement this post]
"""
        return prompt

    def _parse_response(self, response: str) -> GeneratedPost:
        """Parse the LLM response into structured data"""

        try:
            # Extract post content
            post_match = re.search(r'POST:\s*(.*?)(?=HASHTAGS:|CTA:|IMAGE_PROMPT:|$)', response, re.DOTALL | re.IGNORECASE)
            post_content = post_match.group(1).strip() if post_match else self._extract_main_content(response)

            # Extract hashtags
            hashtags_match = re.search(r'HASHTAGS:\s*(.*?)(?=CTA:|IMAGE_PROMPT:|$)', response, re.DOTALL | re.IGNORECASE)
            hashtags_text = hashtags_match.group(1).strip() if hashtags_match else ""
            hashtags = [tag.strip() for tag in hashtags_text.split() if tag.strip().startswith('#')]

            # Extract CTA
            cta_match = re.search(r'CTA:\s*(.*?)(?=IMAGE_PROMPT:|$)', response, re.DOTALL | re.IGNORECASE)
            cta = cta_match.group(1).strip() if cta_match else ""

            # Extract image prompt
            image_match = re.search(r'IMAGE_PROMPT:\s*(.*?)$', response, re.DOTALL | re.IGNORECASE)
            image_prompt = image_match.group(1).strip() if image_match else ""

            # Ensure we have good defaults
            if not hashtags:
                hashtags = self._generate_default_hashtags(post_content)
            if not cta:
                cta = "What are your thoughts on this?"
            if not image_prompt:
                image_prompt = f"professional illustration related to {self.style} business content"

            return GeneratedPost(
                content=post_content,
                agent_style=self.style,
                hashtags=hashtags,
                cta=cta,
                image_prompt=image_prompt
            )

        except Exception as e:
            logger.error(f"Error parsing response: {str(e)}")
            return self._create_fallback_post(None, 0.0)

    def _extract_main_content(self, response: str) -> str:
        """Extract main content if structured parsing fails"""
        lines = response.split('\n')
        content_lines = []

        for line in lines:
            line = line.strip()
            if line and not line.upper().startswith(('HASHTAGS:', 'CTA:', 'IMAGE_PROMPT:')):
                content_lines.append(line)

        return '\n'.join(content_lines[:15])

    def _generate_default_hashtags(self, content: str) -> List[str]:
        """Generate default hashtags based on content"""
        default_hashtags = {
            "professional": ["#Leadership", "#Professional", "#Career", "#Business"],
            "bold": ["#Innovation", "#Disruption", "#Future", "#Change"],
            "friendly": ["#Community", "#Connection", "#Networking", "#Growth"],
            "expert": ["#Expertise", "#Industry", "#Knowledge", "#Insights"],
            "concise": ["#Tips", "#Productivity", "#Success", "#Efficiency"]
        }
        return default_hashtags.get(self.style, ["#LinkedIn", "#Professional", "#Business"])

    def _create_fallback_post(self, request: Optional[PostRequest], generation_time: float = 0.0) -> GeneratedPost:
        """Create a high-quality fallback post when API fails"""

        if not request:
            topic = "professional development"
        else:
            topic = request.topic

        fallback_posts = {
            "professional": f"""🚀 Reflecting on {topic} and its impact on our professional journey.

In today's rapidly evolving business landscape, staying ahead requires continuous learning and adaptation. The most successful professionals are those who embrace change as an opportunity rather than a challenge.

Key insights I've observed:
• Consistency in effort leads to exponential results
• Building genuine relationships creates lasting value
• Investing in skills today pays dividends tomorrow

Success isn't just about reaching your destination—it's about who you become along the way.""",

            "bold": f"""🔥 Let's talk about {topic} - and why most people get it completely wrong.

Here's the truth nobody wants to hear: Average thinking produces average results.

While everyone else is playing it safe, the real winners are:
→ Taking calculated risks
→ Challenging conventional wisdom
→ Building systems that scale

The market rewards boldness, not hesitation.

Stop waiting for permission. Start creating the future you want.""",

            "friendly": f"""😊 I've been thinking a lot about {topic} lately, and wanted to share some thoughts with this amazing community.

You know what I love most about LinkedIn? It's how we can all learn from each other's experiences and grow together.

Here's what I've discovered on my journey:
✨ Every challenge is a learning opportunity
✨ Small consistent actions create big changes
✨ The best insights come from real conversations

I'm curious about your experience too!""",

            "expert": f"""📊 Analysis: The current state of {topic} and strategic implications for business leaders.

Based on industry data and market trends, we're seeing significant shifts that demand attention:

Key findings:
1. Organizations that adapt quickly outperform by 23%
2. Investment in this area shows 3.2x ROI within 18 months
3. Early adopters capture disproportionate market advantage

Strategic recommendations:
• Assess current capabilities against market benchmarks
• Develop implementation roadmap with clear milestones
• Allocate resources for sustained competitive advantage

The window for strategic positioning is narrowing.""",

            "concise": f"""💡 {topic.title()}: 3 key insights

1. Focus on impact, not activity
2. Measure what matters most
3. Iterate based on real feedback

Simple. Effective. Results-driven.

That's it."""
        }

        content = fallback_posts.get(self.style, fallback_posts["professional"])
        token_count = self.count_tokens(content)

        return GeneratedPost(
            content=content,
            agent_style=self.style,
            hashtags=self._generate_default_hashtags(content),
            cta="What's been your experience with this?",
            image_prompt=f"professional business illustration about {topic}",
            token_count=token_count,
            generation_time=generation_time
        )

    def _create_error_post(self, error_message: str, generation_time: float = 0.0) -> GeneratedPost:
        """Create an error post with helpful information"""
        return GeneratedPost(
            content=f"⚠️ Service temporarily unavailable: {error_message}",
            agent_style=self.style,
            hashtags=["#TechnicalIssue"],
            cta="Please try again later",
            is_filtered=True,
            filter_reason=error_message,
            token_count=50,
            generation_time=generation_time
        )

class LinkedInPostGenerator:
    """Main class that coordinates multiple agents for post generation"""

    def __init__(self, api_key: str):
        self.api_key = api_key
        self.filter = ContentFilter()
        self.image_generator = ImageGenerator(api_key)

        # Initialize agents with different styles
        self.agents = {
            "professional": LinkedInAgent("professional", api_key),
            "bold": LinkedInAgent("bold", api_key),
            "friendly": LinkedInAgent("friendly", api_key),
            "expert": LinkedInAgent("expert", api_key),
            "concise": LinkedInAgent("concise", api_key)
        }

    async def generate_posts(self, request: PostRequest) -> tuple[List[GeneratedPost], GenerationStats]:
        """Generate multiple high-quality posts using different agents concurrently"""

        start_time = datetime.now()

        # Select agents based on number of posts requested
        selected_agents = list(self.agents.values())[:request.num_posts]

        # Generate posts concurrently for speed
        tasks = [agent.generate_post(request) for agent in selected_agents]
        posts = await asyncio.gather(*tasks, return_exceptions=True)

        # Filter content and handle exceptions
        filtered_posts = []
        total_tokens = 0

        for i, post in enumerate(posts):
            if isinstance(post, Exception):
                # Create fallback for failed posts
                post = selected_agents[i]._create_error_post(f"Generation failed: {str(post)}")

            # Apply content filtering
            is_clean, reason = self.filter.filter_content(post.content)
            post.is_filtered = not is_clean
            post.filter_reason = reason

            # Generate image prompt if not filtered
            if not post.is_filtered and not post.image_prompt:
                post.image_prompt = await self.image_generator.generate_image_prompt(request.topic, post.agent_style)
                # Optionally generate actual image
                post.image_url = await self.image_generator.generate_image_url(post.image_prompt)

            total_tokens += post.token_count
            filtered_posts.append(post)

        total_time = (datetime.now() - start_time).total_seconds()

        # Calculate cost estimate
        cost_estimate = sum(selected_agents[0].estimate_cost(post.token_count) for post in filtered_posts)

        stats = GenerationStats(
            total_tokens=total_tokens,
            total_time=total_time,
            cost_estimate=cost_estimate,
            posts_generated=len(filtered_posts)
        )

        return filtered_posts, stats

# Global generator instance
generator = None

def initialize_generator():
    """Initialize the post generator with API key"""
    global generator
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        raise ValueError("⚠️ OPENROUTER_API_KEY environment variable is required. Get one from https://openrouter.ai/")
    generator = LinkedInPostGenerator(api_key)

def format_post_card(post: GeneratedPost) -> str:
    """Format a post as a beautiful HTML card with guaranteed black text"""

    if post.is_filtered:
        return f"""
        <div style="border: 2px solid #ff4444; border-radius: 12px; padding: 25px; margin: 15px 0; background: #fff5f5;">
            <h3 style="color: #cc0000 !important; margin: 0 0 15px 0; font-size: 20px;">
                ⚠️ {post.agent_style.title()} Style - Content Filtered
            </h3>
            <p style="color: #666666 !important; margin: 5px 0; font-size: 16px;">
                <strong style="color: #cc0000 !important;">Reason:</strong> {post.filter_reason}
            </p>
            <p style="color: #888888 !important; font-style: italic; margin: 10px 0 0 0;">
                Content was automatically filtered for quality and safety.
            </p>
        </div>
        """

    hashtags_display = " ".join(post.hashtags) if post.hashtags else "#LinkedIn #Professional"
    cta_display = post.cta if post.cta else "What are your thoughts?"

    # Use actual generated image if available, otherwise placeholder
    if post.image_url and post.image_url.startswith("data:image/"):
        image_html = f"""
        <div style="margin: 15px 0; text-align: center;">
            <img src="{post.image_url}" alt="Generated professional image"
                 style="max-width: 100%; height: 200px; object-fit: cover; border-radius: 8px;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        </div>
        """
    else:
        image_html = f"""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 200px; border-radius: 8px; margin: 15px 0;
                    display: flex; align-items: center; justify-content: center;
                    color: white; font-size: 16px; font-weight: bold; text-align: center;">
            📸 Professional Image<br>
            <small style="font-size: 12px; opacity: 0.8; margin-top: 5px;">{post.image_prompt[:50]}...</small>
        </div>
        """

    # Performance stats
    stats_html = f"""
    <div style="background: #f0f8ff; padding: 15px; border-radius: 8px; margin: 15px 0;
                border-left: 4px solid #0a66c2;">
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; font-size: 12px;">
            <div style="text-align: center;">
                <strong style="color: #0a66c2 !important;">Generation Time</strong><br>
                <span style="color: #000000 !important;">{post.generation_time:.2f}s</span>
            </div>
            <div style="text-align: center;">
                <strong style="color: #0a66c2 !important;">Token Count</strong><br>
                <span style="color: #000000 !important;">{post.token_count}</span>
            </div>
            <div style="text-align: center;">
                <strong style="color: #0a66c2 !important;">Style</strong><br>
                <span style="color: #000000 !important;">{post.agent_style.title()}</span>
            </div>
        </div>
    </div>
    """

    return f"""
    <div style="border: 2px solid #0a66c2; border-radius: 16px; padding: 30px; margin: 20px 0;
                background: #ffffff; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">

        <!-- Header -->
        <div style="display: flex; align-items: center; margin-bottom: 20px;">
            <span style="background: #0a66c2; color: #ffffff !important; padding: 8px 16px;
                         border-radius: 20px; font-size: 12px; font-weight: bold; margin-right: 15px;">
                {post.agent_style.upper()}
            </span>
            <h3 style="color: #0a66c2 !important; margin: 0; font-size: 24px; font-weight: 600;">
                LinkedIn Post
            </h3>
        </div>

        <!-- Performance Stats -->
        {stats_html}

        <!-- Image -->
        {image_html}

        <!-- Post Content -->
        <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; margin: 20px 0;
                    border-left: 4px solid #0a66c2;">
            <div style="color: #000000 !important; font-size: 18px; line-height: 1.6;
                        font-weight: 400; white-space: pre-line;">
{post.content}
            </div>
        </div>

        <!-- Engagement Section -->
        <div style="background: #f3f2ef; padding: 20px; border-radius: 10px; margin-top: 20px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <span style="color: #666666 !important; font-size: 14px;">👍 💬 📤</span>
                <span style="color: #666666 !important; font-size: 14px;">{len(post.content.split())} words</span>
            </div>

            <!-- Hashtags -->
            <div style="margin: 15px 0;">
                <p style="color: #000000 !important; margin: 5px 0; font-size: 16px;">
                    <strong style="color: #000000 !important;">🏷️ Hashtags:</strong>
                </p>
                <div style="color: #0a66c2 !important; font-size: 15px; font-weight: 500; margin-top: 8px;">
                    {hashtags_display}
                </div>
            </div>

            <!-- Call to Action -->
            <div style="margin: 15px 0;">
                <p style="color: #000000 !important; margin: 5px 0; font-size: 16px;">
                    <strong style="color: #000000 !important;">💬 Engagement Question:</strong>
                </p>
                <div style="color: #000000 !important; font-size: 15px; font-style: italic;
                           background: #ffffff; padding: 12px; border-radius: 8px; margin-top: 8px;
                           border: 1px solid #e0e0e0;">
                    "{cta_display}"
                </div>
            </div>
        </div>

        <!-- Copy Button -->
        <div style="text-align: center; margin-top: 20px;">
            <button onclick="copyToClipboard_{hash(post.content)}()"
                    style="background: #0a66c2; color: white; border: none; padding: 12px 24px;
                           border-radius: 24px; font-size: 14px; font-weight: bold; cursor: pointer;">
                📋 Copy Post
            </button>
        </div>

        <script>
        function copyToClipboard_{hash(post.content)}() {{
            const text = `{post.content}

{hashtags_display}

{cta_display}`;
            navigator.clipboard.writeText(text).then(() => {{
                alert('Post copied to clipboard!');
            }});
        }}
        </script>
    </div>
    """

def format_stats_summary(stats: GenerationStats) -> str:
    """Format generation statistics as HTML"""
    return f"""
    <div style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                color: white; padding: 25px; border-radius: 15px; margin: 20px 0;
                box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);">
        <h3 style="color: white !important; margin: 0 0 15px 0; font-size: 20px;">
            📊 Generation Complete - Performance Stats
        </h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px;">
            <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: white !important;">
                    {stats.posts_generated}
                </div>
                <div style="font-size: 12px; opacity: 0.9; color: white !important;">Posts Generated</div>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: white !important;">
                    {stats.total_time:.1f}s
                </div>
                <div style="font-size: 12px; opacity: 0.9; color: white !important;">Total Time</div>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: white !important;">
                    {stats.total_tokens:,}
                </div>
                <div style="font-size: 12px; opacity: 0.9; color: white !important;">Total Tokens</div>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: white !important;">
                    ${stats.cost_estimate:.4f}
                </div>
                <div style="font-size: 12px; opacity: 0.9; color: white !important;">Est. Cost</div>
            </div>
        </div>
    </div>
    """

async def generate_linkedin_posts(topic, tone, audience, hashtags, cta, length, num_posts, progress=gr.Progress()):
    """Main function to generate LinkedIn posts with progress tracking"""

    if not topic or not topic.strip():
        return """
        <div style="color: #cc0000; padding: 40px; text-align: center;
                    background: #fff5f5; border-radius: 12px; margin: 20px;">
            <h2 style="color: #cc0000 !important;">❌ Missing Topic</h2>
            <p style="color: #000000 !important; font-size: 18px;">
                Please enter a topic for your LinkedIn post to get started.
            </p>
            <p style="color: #666666 !important; font-size: 14px;">
                Example: "The future of remote work" or "Leadership lessons learned"
            </p>
        </div>
        """

    try:
        if not generator:
            initialize_generator()

        # Show progress
        progress(0.1, desc="🚀 Initializing AI agents...")

        # Create request object
        request = PostRequest(
            topic=topic.strip(),
            tone=tone or "professional",
            audience=audience.strip() or "general professionals",
            hashtags=hashtags.strip() or "",
            cta=cta.strip() or "",
            length=length,
            num_posts=int(num_posts)
        )

        progress(0.3, desc="🤖 AI agents generating posts...")

        # Generate posts with stats
        posts, stats = await generator.generate_posts(request)

        progress(0.8, desc="🎨 Formatting beautiful cards...")

        # Format posts as HTML cards
        formatted_posts = []
        for post in posts:
            formatted_posts.append(format_post_card(post))

        progress(1.0, desc="✅ Complete!")

        # Create final result with stats
        result_html = f"""
        <div style="max-width: 1000px; margin: 0 auto; color: #000000 !important;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">

            <!-- Header -->
            <div style="text-align: center; background: linear-gradient(135deg, #0a66c2 0%, #004182 100%);
                        color: white; padding: 40px 30px; border-radius: 20px; margin-bottom: 30px;
                        box-shadow: 0 8px 32px rgba(10, 102, 194, 0.3);">
                <h1 style="color: #ffffff !important; margin: 0; font-size: 32px; font-weight: 700;">
                    🎯 Your LinkedIn Posts Are Ready!
                </h1>
                <p style="color: #ffffff !important; margin: 15px 0 0 0; font-size: 18px; opacity: 0.9;">
                    Topic: "<strong>{topic}</strong>"
                </p>
                <p style="color: #ffffff !important; margin: 5px 0 0 0; font-size: 14px; opacity: 0.8;">
                    Generated {len(posts)} unique posts with different styles
                </p>
            </div>

            <!-- Performance Stats -->
            {format_stats_summary(stats)}

            <!-- Posts -->
            <div style="display: flex; flex-direction: column; gap: 0;">
                {"".join(formatted_posts)}
            </div>

            <!-- Footer -->
            <div style="text-align: center; margin-top: 40px; padding: 30px;
                        background: #f8f9fa; border-radius: 15px; border: 1px solid #e0e0e0;">
                <h3 style="color: #0a66c2 !important; margin: 0 0 15px 0;">🚀 Ready to Post?</h3>
                <p style="color: #000000 !important; margin: 5px 0; font-size: 16px;">
                    Copy your favorite post and share it on LinkedIn to engage your network!
                </p>
                <p style="color: #666666 !important; margin: 15px 0 0 0; font-size: 14px;">
                    ✨ Generated on {datetime.now().strftime("%B %d, %Y at %I:%M %p")} |
                    💡 Each post optimized for maximum engagement
                </p>
            </div>
        </div>
        """

        return result_html

    except ValueError as ve:
        return f"""
        <div style="color: #cc0000; padding: 30px; text-align: center;
                    background: #fff5f5; border-radius: 12px; margin: 20px;">
            <h2 style="color: #cc0000 !important;">🔑 API Key Required</h2>
            <p style="color: #000000 !important; font-size: 16px;">{str(ve)}</p>
            <p style="color: #666666 !important; font-size: 14px; margin-top: 15px;">
                1. Get your free API key from <a href="https://openrouter.ai/" target="_blank">OpenRouter.ai</a><br>
                2. Set it as environment variable: OPENROUTER_API_KEY<br>
                3. Restart the application
            </p>
        </div>
        """

    except Exception as e:
        logger.error(f"Error in generate_linkedin_posts: {str(e)}")
        return f"""
        <div style="color: #cc0000; padding: 30px; text-align: center;
                    background: #fff5f5; border-radius: 12px; margin: 20px;">
            <h2 style="color: #cc0000 !important;">❌ Generation Error</h2>
            <p style="color: #000000 !important; font-size: 16px;">
                Sorry, there was an error generating your LinkedIn posts.
            </p>
            <details style="margin: 20px 0; text-align: left;">
                <summary style="color: #666666 !important; cursor: pointer;">Show technical details</summary>
                <pre style="color: #000000 !important; background: #f0f0f0; padding: 15px;
                           border-radius: 8px; margin-top: 10px; font-size: 12px; overflow-x: auto;">
{str(e)}
                </pre>
            </details>
            <p style="color: #666666 !important; font-size: 14px;">
                Please try again or check your API key and internet connection.
            </p>
        </div>
        """

# Flask health check app for deployment monitoring
health_app = Flask(__name__)

@health_app.route('/health')
def health_check():
    """Health check endpoint for monitoring"""
    return jsonify({
        "status": "healthy",
        "service": "LinkedIn Post Generator",
        "version": "2.1",
        "timestamp": datetime.now().isoformat(),
        "features": [
            "Multi-agent AI generation",
            "Content filtering",
            "Image generation",
            "Professional formatting",
            "Copy functionality",
            "Performance tracking",
            "Cost estimation"
        ],
        "api_status": "connected" if os.getenv("OPENROUTER_API_KEY") else "missing_key"
    })

@health_app.route('/metrics')
def metrics():
    """Basic metrics endpoint"""
    return jsonify({
        "uptime": "healthy",
        "api_key_configured": bool(os.getenv("OPENROUTER_API_KEY")),
        "agents_available": ["professional", "bold", "friendly", "expert", "concise"],
        "supported_models": ["anthropic/claude-3-haiku", "black-forest-labs/flux-1-schnell-free"]
    })

def run_health_server():
    """Run the health check server in a separate thread"""
    health_port = int(os.getenv("HEALTH_PORT", 8080))
    health_app.run(host="0.0.0.0", port=health_port, debug=False)

def create_gradio_interface():
    """Create the beautiful Gradio interface with fixed dropdown visibility"""

    # Enhanced CSS for perfect styling with guaranteed black text and proper dropdown visibility
    css = """
     /* Enhanced CSS for perfect styling with proper text color on different backgrounds */
    .gradio-container {
        color: #000000 !important;
    }

    /* Default text colors - black for light backgrounds */
    .gradio-container p, .gradio-container div, .gradio-container span,
    .gradio-container h1, .gradio-container h2, .gradio-container h3,
    .gradio-container h4, .gradio-container h5, .gradio-container h6,
    .gradio-container label, .gradio-container button {
        color: #000000 !important;
    }

    /* Fix for dark background elements - force white text */
    .gradio-container .gr-group,
    .gradio-container .gr-box,
    .gradio-container .gr-form,
    .gradio-container [style*="linear-gradient"],
    .gradio-container [style*="background"],
    .gradio-container .dark-bg,
    .gradio-container .dark-bg * {
        background: transparent !important;
    }

    /* Ensure all labels and text are always visible */
    .gradio-container label,
    .gradio-container .gr-box label,
    .gradio-container .gr-group label,
    .gradio-container .gr-form label,
    .gradio-container span,
    .gradio-container div,
    .gradio-container p {
        color: #000000 !important;
        background: transparent !important;
        text-shadow: none !important;
    }

    /* Override any dark backgrounds that might be applied by Gradio */
    .gradio-container * {
        background-image: none !important;
    }

    /* Main container styling */
    .gradio-container {
        max-width: 1400px !important;
        margin: 0 auto !important;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        background: #f5f5f5 !important;
    }

    .gradio-container label {
        color: #333333 !important;
        font-weight: 600 !important;
        margin-bottom: 8px !important;
        display: block !important;
    }

    /* Header styling - exception for white text on blue background */
    .main-header {
        background: linear-gradient(135deg, #0a66c2 0%, #004182 100%) !important;
        color: white !important;
        padding: 50px 30px !important;
        border-radius: 20px !important;
        margin-bottom: 40px !important;
        box-shadow: 0 8px 32px rgba(10, 102, 194, 0.3) !important;
        text-align: center !important;
    }

    .main-header h1, .main-header p {
        color: white !important;
    }

    /* Input section styling */
    .input-section {
        background: white !important;
        padding: 35px !important;
        border-radius: 16px !important;
        border: 1px solid #e0e0e0 !important;
        margin-bottom: 25px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08) !important;
    }

    /* Button styling */
    .generate-btn {
        background: linear-gradient(135deg, #0a66c2 0%, #004182 100%) !important;
        border: none !important;
        border-radius: 12px !important;
        color: white !important;
        font-weight: bold !important;
        padding: 16px 32px !important;
        font-size: 18px !important;
        box-shadow: 0 4px 12px rgba(10, 102, 194, 0.3) !important;
        transition: all 0.3s ease !important;
    }

    .generate-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 16px rgba(10, 102, 194, 0.4) !important;
    }

    /* Input field styling - FIXED for dropdowns */
    .gradio-container input, .gradio-container textarea, .gradio-container select {
        border: 2px solid #e0e0e0 !important;
        border-radius: 8px !important;
        padding: 12px !important;
        font-size: 16px !important;
        color: #000000 !important;
        background: white !important;
        width: 100% !important;
        box-sizing: border-box !important;
        min-height: 45px !important;
    }

    .gradio-container input:focus, .gradio-container textarea:focus, .gradio-container select:focus {
        border-color: #0a66c2 !important;
        outline: none !important;
        box-shadow: 0 0 0 3px rgba(10, 102, 194, 0.1) !important;
    }

    /* Dropdown specific fixes */
    .gradio-container .gr-dropdown {
        position: relative !important;
        z-index: 100 !important;
    }

    .gradio-container .gr-dropdown .gr-box {
        background: white !important;
        border: 2px solid #e0e0e0 !important;
        border-radius: 8px !important;
        min-height: 45px !important;
    }

    .gradio-container .gr-dropdown-container {
        position: relative !important;
        z-index: 101 !important;
    }

    .gradio-container .gr-dropdown .choices {
        background: white !important;
        border: 2px solid #0a66c2 !important;
        border-radius: 8px !important;
        margin-top: 2px !important;
        max-height: 200px !important;
        overflow-y: auto !important;
        z-index: 102 !important;
        position: absolute !important;
        width: 100% !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
    }

    .gradio-container .gr-dropdown .choices .choice {
        padding: 12px !important;
        color: #000000 !important;
        background: white !important;
        border-bottom: 1px solid #f0f0f0 !important;
    }

    .gradio-container .gr-dropdown .choices .choice:hover {
        background: #f8f9fa !important;
        color: #0a66c2 !important;
    }

    /* Row spacing fixes */
    .gradio-container .gr-row {
        display: flex !important;
        gap: 20px !important;
        align-items: flex-start !important;
        margin-bottom: 20px !important;
    }

    .gradio-container .gr-column {
        flex: 1 !important;
        min-width: 0 !important;
    }

    /* Info box styling */
    .info-box {
        background: #e3f2fd !important;
        border-left: 4px solid #0a66c2 !important;
        padding: 25px !important;
        border-radius: 8px !important;
        margin-top: 25px !important;
    }

    .info-box h3, .info-box p, .info-box li {
        color: #000000 !important;
    }

    /* Footer styling */
    .footer {
        text-align: center !important;
        margin-top: 50px !important;
        padding: 30px !important;
        border-top: 1px solid #e0e0e0 !important;
        color: #666666 !important;
    }

    /* Ensure output HTML maintains black text */
    .gradio-container .output-html, .gradio-container .output-html * {
        color: #000000 !important;
    }

    /* Section headers */
    .section-header {
        color: #0a66c2 !important;
        font-size: 20px !important;
        font-weight: 600 !important;
        margin: 25px 0 15px 0 !important;
        padding-bottom: 8px !important;
        border-bottom: 2px solid #e3f2fd !important;
    }

    /* First section header */
    .section-header:first-of-type {
        margin-top: 0 !important;
    }

    /* Spacing between form elements */
    .gradio-container .gr-form > * {
        margin-bottom: 20px !important;
    }

    /* Slider styling */
    .gradio-container .gr-slider {
        margin: 10px 0 !important;
    }

    .gradio-container .gr-slider input[type="range"] {
        background: #e0e0e0 !important;
        height: 8px !important;
        border-radius: 4px !important;
    }

    .gradio-container .gr-slider input[type="range"]::-webkit-slider-thumb {
        background: #0a66c2 !important;
        border: none !important;
        height: 20px !important;
        width: 20px !important;
        border-radius: 50% !important;
    }
    """

    with gr.Blocks(css=css, title="🚀 LinkedIn Post Generator - AI-Powered Content Creation", theme=gr.themes.Soft()) as interface:

        # Header
        gr.HTML("""
            <div class="main-header">
                <h1 style="margin: 0; font-size: 3em; font-weight: 800;">🚀 LinkedIn Post Generator</h1>
                <p style="margin: 20px 0 10px 0; font-size: 1.3em; opacity: 0.95;">
                    AI-Powered Multi-Agent Content Creation System
                </p>
                <p style="margin: 5px 0 0 0; font-size: 1em; opacity: 0.8;">
                    Generate 5 unique LinkedIn posts in different styles with professional images
                </p>
            </div>
        """)

        with gr.Row():
            with gr.Column(scale=1, elem_classes=["input-column"]):
                gr.HTML('<div class="input-section">')

                # Topic input (required)
                gr.HTML('<h3 class="section-header">📝 Post Content</h3>')

                topic = gr.Textbox(
                    label="💡 What's your LinkedIn post topic?",
                    placeholder="e.g., 'The future of remote work and its impact on company culture'\n'5 leadership lessons I learned from failure'\n'Why authenticity beats perfection in business'",
                    lines=3,
                    info="This is the main subject of your LinkedIn posts. Be specific for best results!"
                )

                # Style preferences with proper spacing
                gr.HTML('<h3 class="section-header">🎨 Style Preferences</h3>')

                with gr.Row():
                    with gr.Column():
                        tone = gr.Dropdown(
                            label="🎭 Overall Tone",
                            choices=["professional", "casual", "inspirational", "educational", "conversational", "authoritative"],
                            value="professional",
                            info="The general tone across all posts",
                            elem_id="tone-dropdown"
                        )

                    with gr.Column():
                        length = gr.Dropdown(
                            label="📏 Post Length",
                            choices=["short", "medium", "long"],
                            value="medium",
                            info="Short: ~100 words, Medium: ~200 words, Long: ~300 words",
                            elem_id="length-dropdown"
                        )

                audience = gr.Textbox(
                    label="👥 Target Audience",
                    placeholder="e.g., 'startup founders and entrepreneurs', 'marketing professionals', 'recent graduates'",
                    value="general professionals",
                    info="Who are you writing for? Be specific to get better targeted content."
                )

                # Optional enhancements with proper spacing
                gr.HTML('<h3 class="section-header">✨ Optional Enhancements</h3>')

                with gr.Row():
                    with gr.Column():
                        hashtags = gr.Textbox(
                            label="🏷️ Preferred Hashtags",
                            placeholder="e.g., #leadership #innovation #remotework #entrepreneurship",
                            info="Hashtags you'd like to include (AI will add more relevant ones)"
                        )

                    with gr.Column():
                        num_posts = gr.Slider(
                            label="📊 Number of Posts",
                            minimum=3,
                            maximum=5,
                            step=1,
                            value=3,
                            info="Each post will have a different style: Professional, Bold, Friendly, Expert, Concise"
                        )

                cta = gr.Textbox(
                    label="📢 Call-to-Action Style",
                    placeholder="e.g., 'Ask for experiences', 'Request opinions', 'Encourage sharing stories'",
                    info="What kind of engagement do you want? (AI will create specific questions)"
                )

                # Generate button with proper spacing
                gr.HTML('<div style="margin: 30px 0 20px 0;">')
                generate_btn = gr.Button(
                    "🚀 Generate LinkedIn Posts",
                    elem_classes=["generate-btn"],
                    size="lg"
                )
                gr.HTML('</div>')

                gr.HTML('</div>')

                # Information box
                gr.HTML("""
                    <div class="info-box">
                        <h3 style="margin-top: 0; color: #0a66c2;">🤖 AI Multi-Agent System</h3>
                        <p><strong>How it works:</strong></p>
                        <ul style="margin: 15px 0; padding-left: 25px;">
                            <li><strong>Professional Agent:</strong> Creates formal, business-focused content</li>
                            <li><strong>Bold Agent:</strong> Generates attention-grabbing, opinion-driven posts</li>
                            <li><strong>Friendly Agent:</strong> Writes warm, conversational content</li>
                            <li><strong>Expert Agent:</strong> Produces authoritative, insight-rich posts</li>
                            <li><strong>Concise Agent:</strong> Delivers punchy, straight-to-the-point messages</li>
                        </ul>
                        <p><strong>Features:</strong></p>
                        <ul style="margin: 10px 0; padding-left: 25px;">
                            <li>✅ Concurrent generation for speed</li>
                            <li>✅ Content filtering for professionalism</li>
                            <li>✅ Hashtag extraction and optimization</li>
                            <li>✅ Custom call-to-action generation</li>
                            <li>✅ Professional image generation</li>
                            <li>✅ Performance and cost tracking</li>
                            <li>✅ Copy-paste ready format</li>
                        </ul>
                    </div>
                """)

            with gr.Column(scale=2):
                # Output area
                output = gr.HTML(
                    value="""
                    <div style="text-align: center; padding: 80px 40px; color: #666;
                                background: white; border-radius: 20px; border: 2px dashed #e0e0e0;
                                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);">
                        <div style="font-size: 4em; margin-bottom: 20px;">🎯</div>
                        <h2 style="color: #0a66c2; margin: 0 0 15px 0;">Your LinkedIn Posts Will Appear Here</h2>
                        <p style="color: #000000; font-size: 18px; margin-bottom: 20px;">
                            Enter a topic and click "Generate LinkedIn Posts" to see AI-created content variations.
                        </p>
                        <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; margin-top: 30px;">
                            <h4 style="color: #0a66c2; margin: 0 0 15px 0;">What You'll Get:</h4>
                            <div style="text-align: left; max-width: 500px; margin: 0 auto;">
                                <p style="color: #000000; margin: 8px 0;">📝 3-5 unique post variations</p>
                                <p style="color: #000000; margin: 8px 0;">🎨 Different writing styles and approaches</p>
                                <p style="color: #000000; margin: 8px 0;">🏷️ Optimized hashtags for each post</p>
                                <p style="color: #000000; margin: 8px 0;">💬 Engaging call-to-action questions</p>
                                <p style="color: #000000; margin: 8px 0;">📸 Professional image generation</p>
                                <p style="color: #000000; margin: 8px 0;">📊 Performance and cost tracking</p>
                                <p style="color: #000000; margin: 8px 0;">📋 One-click copy functionality</p>
                            </div>
                        </div>
                    </div>
                    """,
                    label="Generated Posts",
                    elem_classes=["output-html"]
                )

        # Event handler
        generate_btn.click(
            fn=generate_linkedin_posts,
            inputs=[topic, tone, audience, hashtags, cta, length, num_posts],
            outputs=output,
            show_progress=True
        )

        # Footer with deployment instructions
        gr.HTML("""
            <div class="footer">
                <h3 style="color: #0a66c2; margin: 0 0 20px 0;">🌟 Tips for Maximum Engagement</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div style="background: white; padding: 20px; border-radius: 12px; border: 1px solid #e0e0e0;">
                        <h4 style="color: #0a66c2; margin: 0 0 10px 0;">📈 Best Posting Times</h4>
                        <p style="color: #000000; margin: 0; font-size: 14px;">Tuesday-Thursday, 8-10 AM or 12-2 PM in your audience's timezone</p>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 12px; border: 1px solid #e0e0e0;">
                        <h4 style="color: #0a66c2; margin: 0 0 10px 0;">💡 Engagement Tips</h4>
                        <p style="color: #000000; margin: 0; font-size: 14px;">Ask questions, share personal experiences, use 3-5 hashtags maximum</p>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 12px; border: 1px solid #e0e0e0;">
                        <h4 style="color: #0a66c2; margin: 0 0 10px 0;">🎯 Content Strategy</h4>
                        <p style="color: #000000; margin: 0; font-size: 14px;">Mix educational, personal, and industry insights for best results</p>
                    </div>
                </div>

                <!-- Deployment Info -->
                <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; margin: 20px 0; border: 1px solid #e0e0e0;">
                    <h4 style="color: #0a66c2; margin: 0 0 15px 0;">🚀 Deployment Ready</h4>
                    <div style="text-align: left; max-width: 600px; margin: 0 auto;">
                        <p style="color: #000000; margin: 8px 0;"><strong>Health Check:</strong> /health endpoint available on port 8080</p>
                        <p style="color: #000000; margin: 8px 0;"><strong>Metrics:</strong> /metrics endpoint for monitoring</p>
                        <p style="color: #000000; margin: 8px 0;"><strong>Deploy to:</strong> Hugging Face Spaces, Render, Railway, or Vercel</p>
                        <p style="color: #000000; margin: 8px 0;"><strong>Requirements:</strong> gradio, aiohttp, flask, python-dotenv</p>
                    </div>
                </div>

                <p style="color: #888888; font-size: 14px; margin: 20px 0 0 0;">
                    💡 Built with ❤️ using Gradio and OpenRouter AI |
                    🚀 Generate unlimited LinkedIn posts |
                    📊 Optimized for maximum engagement |
                    🔍 Performance tracking included
                </p>
            </div>
        """)

    return interface


def main():
    """Main function to run the application"""
    try:
        # Start health check server in background
        health_thread = threading.Thread(target=run_health_server, daemon=True)
        health_thread.start()
        logger.info("🏥 Health check server started on port 8080")

        # Initialize the generator
        initialize_generator()
        logger.info("🚀 LinkedIn Post Generator initialized successfully")

        # Create and launch the interface
        interface = create_gradio_interface()

        # Configure for deployment
        port = int(os.getenv("PORT", 7860))

        # Launch with optimized settings
        interface.launch(
            server_name="0.0.0.0",
            server_port=port,
            share=True,  # Creates public link for Colab
            show_error=True,
            favicon_path=None,
            app_kwargs={"docs_url": "/docs", "redoc_url": "/redoc"}
        )

    except Exception as e:
        logger.error(f"❌ Failed to start application: {str(e)}")
        print(f"""
        🔧 Setup Help:
        1. Make sure you have set OPENROUTER_API_KEY environment variable
        2. Get your free API key from: https://openrouter.ai/
        3. In Colab: os.environ["OPENROUTER_API_KEY"] = "your_key_here"
        4. Install required packages: pip install gradio aiohttp python-dotenv flask

        🚀 Deployment Options:
        1. Hugging Face Spaces (Easiest): Upload to spaces.huggingface.co
        2. Render: Connect GitHub repo at render.com
        3. Railway: Deploy from GitHub at railway.app
        4. Local: python app.py (after setting API key)

        📋 Required Environment Variables:
        - OPENROUTER_API_KEY (required)
        - PORT (optional, default: 7860)
        - HEALTH_PORT (optional, default: 8080)

        Error: {str(e)}
        """)
        raise

if __name__ == "__main__":
    main()

# Enhanced CSS for perfect styling with guaranteed black text
    css = """
    /* Force all text elements to be black */
    .gradio-container, .gradio-container * {
        color: #000000 !important;
    }

    /* Override Gradio's default colors */
    .gradio-container p, .gradio-container div, .gradio-container span,
    .gradio-container h1, .gradio-container h2, .gradio-container h3,
    .gradio-container h4, .gradio-container h5, .gradio-container h6,
    .gradio-container label, .gradio-container button {
        color: #000000 !important;
    }

    /* Main container styling */
    .gradio-container {
        max-width: 1400px !important;
        margin: 0 auto !important;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        background: #f5f5f5 !important;
    }

    .gradio-container label {
        color: #333333 !important;
        font-weight: 600 !important;
    }

    /* Header styling - exception for white text on blue background */
    .main-header {
        background: linear-gradient(135deg, #0a66c2 0%, #004182 100%) !important;
        color: white !important;
        padding: 50px 30px !important;
        border-radius: 20px !important;
        margin-bottom: 40px !important;
        box-shadow: 0 8px 32px rgba(10, 102, 194, 0.3) !important;
        text-align: center !important;
    }

    .main-header h1, .main-header p {
        color: white !important;
    }

    /* Input section styling */
    .input-section {
        background: white !important;
        padding: 35px !important;
        border-radius: 16px !important;
        border: 1px solid #e0e0e0 !important;
        margin-bottom: 25px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08) !important;
    }

    /* Button styling */
    .generate-btn {
        background: linear-gradient(135deg, #0a66c2 0%, #004182 100%) !important;
        border: none !important;
        border-radius: 12px !important;
        color: white !important;
        font-weight: bold !important;
        padding: 16px 32px !important;
        font-size: 18px !important;
        box-shadow: 0 4px 12px rgba(10, 102, 194, 0.3) !important;
        transition: all 0.3s ease !important;
    }

    .generate-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 16px rgba(10, 102, 194, 0.4) !important;
    }

    /* Input field styling */
    .gradio-container input, .gradio-container textarea, .gradio-container select {
        border: 2px solid #e0e0e0 !important;
        border-radius: 8px !important;
        padding: 12px !important;
        font-size: 16px !important;
        color: #000000 !important;
        background: white !important;
    }

    .gradio-container input:focus, .gradio-container textarea:focus, .gradio-container select:focus {
        border-color: #0a66c2 !important;
        outline: none !important;
        box-shadow: 0 0 0 3px rgba(10, 102, 194, 0.1) !important;
    }

    /* Info box styling */
    .info-box {
        background: #e3f2fd !important;
        border-left: 4px solid #0a66c2 !important;
        padding: 25px !important;
        border-radius: 8px !important;
        margin-top: 25px !important;
    }

    .info-box h3, .info-box p, .info-box li {
        color: #000000 !important;
    }

    /* Footer styling */
    .footer {
        text-align: center !important;
        margin-top: 50px !important;
        padding: 30px !important;
        border-top: 1px solid #e0e0e0 !important;
        color: #666666 !important;
    }

    /* Ensure output HTML maintains black text */
    .gradio-container .output-html, .gradio-container .output-html * {
        color: #000000 !important;
    }
    """

    with gr.Blocks(css=css, title="🚀 LinkedIn Post Generator - AI-Powered Content Creation", theme=gr.themes.Soft()) as interface:

        # Header
        gr.HTML("""
            <div class="main-header">
                <h1 style="margin: 0; font-size: 3em; font-weight: 800;">🚀 LinkedIn Post Generator</h1>
                <p style="margin: 20px 0 10px 0; font-size: 1.3em; opacity: 0.95;">
                    AI-Powered Multi-Agent Content Creation System
                </p>
                <p style="margin: 5px 0 0 0; font-size: 1em; opacity: 0.8;">
                    Generate 5 unique LinkedIn posts in different styles with professional images
                </p>
            </div>
        """)

        with gr.Row():
            with gr.Column(scale=1, elem_classes=["input-column"]):
                gr.HTML('<div class="input-section">')

                # Topic input (required)
                gr.HTML("<h3 style='color: #0a66c2; margin-bottom: 15px; font-size: 20px;'>📝 Post Content</h3>")

                topic = gr.Textbox(
                    label="💡 What's your LinkedIn post topic?",
                    placeholder="e.g., 'The future of remote work and its impact on company culture'\n'5 leadership lessons I learned from failure'\n'Why authenticity beats perfection in business'",
                    lines=3,
                    info="This is the main subject of your LinkedIn posts. Be specific for best results!"
                )

                # Style preferences
                gr.HTML("<h3 style='color: #0a66c2; margin: 25px 0 15px 0; font-size: 20px;'>🎨 Style Preferences</h3>")

                with gr.Row():
                    tone = gr.Dropdown(
                        label="🎭 Overall Tone",
                        choices=["professional", "casual", "inspirational", "educational", "conversational", "authoritative"],
                        value="professional",
                        info="The general tone across all posts"
                    )

                    length = gr.Dropdown(
                        label="📏 Post Length",
                        choices=["short", "medium", "long"],
                        value="medium",
                        info="Short: ~100 words, Medium: ~200 words, Long: ~300 words"
                    )

                audience = gr.Textbox(
                    label="👥 Target Audience",
                    placeholder="e.g., 'startup founders and entrepreneurs', 'marketing professionals', 'recent graduates'",
                    value="general professionals",
                    info="Who are you writing for? Be specific to get better targeted content."
                )

                # Optional enhancements
                gr.HTML("<h3 style='color: #0a66c2; margin: 25px 0 15px 0; font-size: 20px;'>✨ Optional Enhancements</h3>")

                with gr.Row():
                    hashtags = gr.Textbox(
                        label="🏷️ Preferred Hashtags",
                        placeholder="e.g., #leadership #innovation #remotework #entrepreneurship",
                        info="Hashtags you'd like to include (AI will add more relevant ones)"
                    )

                    num_posts = gr.Slider(
                        label="📊 Number of Posts",
                        minimum=3,
                        maximum=5,
                        step=1,
                        value=3,
                        info="Each post will have a different style: Professional, Bold, Friendly, Expert, Concise"
                    )

                cta = gr.Textbox(
                    label="📢 Call-to-Action Style",
                    placeholder="e.g., 'Ask for experiences', 'Request opinions', 'Encourage sharing stories'",
                    info="What kind of engagement do you want? (AI will create specific questions)"
                )

                # Generate button
                generate_btn = gr.Button(
                    "🚀 Generate LinkedIn Posts",
                    elem_classes=["generate-btn"],
                    size="lg"
                )

                gr.HTML('</div>')

                # Information box
                gr.HTML("""
                    <div class="info-box">
                        <h3 style="margin-top: 0; color: #0a66c2;">🤖 AI Multi-Agent System</h3>
                        <p><strong>How it works:</strong></p>
                        <ul style="margin: 15px 0; padding-left: 25px;">
                            <li><strong>Professional Agent:</strong> Creates formal, business-focused content</li>
                            <li><strong>Bold Agent:</strong> Generates attention-grabbing, opinion-driven posts</li>
                            <li><strong>Friendly Agent:</strong> Writes warm, conversational content</li>
                            <li><strong>Expert Agent:</strong> Produces authoritative, insight-rich posts</li>
                            <li><strong>Concise Agent:</strong> Delivers punchy, straight-to-the-point messages</li>
                        </ul>
                        <p><strong>Features:</strong></p>
                        <ul style="margin: 10px 0; padding-left: 25px;">
                            <li>✅ Concurrent generation for speed</li>
                            <li>✅ Content filtering for professionalism</li>
                            <li>✅ Hashtag extraction and optimization</li>
                            <li>✅ Custom call-to-action generation</li>
                            <li>✅ Professional image generation</li>
                            <li>✅ Performance and cost tracking</li>
                            <li>✅ Copy-paste ready format</li>
                        </ul>
                    </div>
                """)

            with gr.Column(scale=2):
                # Output area
                output = gr.HTML(
                    value="""
                    <div style="text-align: center; padding: 80px 40px; color: #666;
                                background: white; border-radius: 20px; border: 2px dashed #e0e0e0;
                                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);">
                        <div style="font-size: 4em; margin-bottom: 20px;">🎯</div>
                        <h2 style="color: #0a66c2; margin: 0 0 15px 0;">Your LinkedIn Posts Will Appear Here</h2>
                        <p style="color: #000000; font-size: 18px; margin-bottom: 20px;">
                            Enter a topic and click "Generate LinkedIn Posts" to see AI-created content variations.
                        </p>
                        <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; margin-top: 30px;">
                            <h4 style="color: #0a66c2; margin: 0 0 15px 0;">What You'll Get:</h4>
                            <div style="text-align: left; max-width: 500px; margin: 0 auto;">
                                <p style="color: #000000; margin: 8px 0;">📝 3-5 unique post variations</p>
                                <p style="color: #000000; margin: 8px 0;">🎨 Different writing styles and approaches</p>
                                <p style="color: #000000; margin: 8px 0;">🏷️ Optimized hashtags for each post</p>
                                <p style="color: #000000; margin: 8px 0;">💬 Engaging call-to-action questions</p>
                                <p style="color: #000000; margin: 8px 0;">📸 Professional image generation</p>
                                <p style="color: #000000; margin: 8px 0;">📊 Performance and cost tracking</p>
                                <p style="color: #000000; margin: 8px 0;">📋 One-click copy functionality</p>
                            </div>
                        </div>
                    </div>
                    """,
                    label="Generated Posts",
                    elem_classes=["output-html"]
                )

        # Event handler
        generate_btn.click(
            fn=generate_linkedin_posts,
            inputs=[topic, tone, audience, hashtags, cta, length, num_posts],
            outputs=output,
            show_progress=True
        )

        # Footer with deployment instructions
        gr.HTML("""
            <div class="footer">
                <h3 style="color: #0a66c2; margin: 0 0 20px 0;">🌟 Tips for Maximum Engagement</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div style="background: white; padding: 20px; border-radius: 12px; border: 1px solid #e0e0e0;">
                        <h4 style="color: #0a66c2; margin: 0 0 10px 0;">📈 Best Posting Times</h4>
                        <p style="color: #000000; margin: 0; font-size: 14px;">Tuesday-Thursday, 8-10 AM or 12-2 PM in your audience's timezone</p>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 12px; border: 1px solid #e0e0e0;">
                        <h4 style="color: #0a66c2; margin: 0 0 10px 0;">💡 Engagement Tips</h4>
                        <p style="color: #000000; margin: 0; font-size: 14px;">Ask questions, share personal experiences, use 3-5 hashtags maximum</p>
                    </div>
                    <div style="background: white; padding: 20px; border-radius: 12px; border: 1px solid #e0e0e0;">
                        <h4 style="color: #0a66c2; margin: 0 0 10px 0;">🎯 Content Strategy</h4>
                        <p style="color: #000000; margin: 0; font-size: 14px;">Mix educational, personal, and industry insights for best results</p>
                    </div>
                </div>

                <!-- Deployment Info -->
                <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; margin: 20px 0; border: 1px solid #e0e0e0;">
                    <h4 style="color: #0a66c2; margin: 0 0 15px 0;">🚀 Deployment Ready</h4>
                    <div style="text-align: left; max-width: 600px; margin: 0 auto;">
                        <p style="color: #000000; margin: 8px 0;"><strong>Health Check:</strong> /health endpoint available on port 8080</p>
                        <p style="color: #000000; margin: 8px 0;"><strong>Metrics:</strong> /metrics endpoint for monitoring</p>
                        <p style="color: #000000; margin: 8px 0;"><strong>Deploy to:</strong> Hugging Face Spaces, Render, Railway, or Vercel</p>
                        <p style="color: #000000; margin: 8px 0;"><strong>Requirements:</strong> gradio, aiohttp, flask, python-dotenv</p>
                    </div>
                </div>

                <p style="color: #888888; font-size: 14px; margin: 20px 0 0 0;">
                    💡 Built with ❤️ using Gradio and OpenRouter AI |
                    🚀 Generate unlimited LinkedIn posts |
                    📊 Optimized for maximum engagement |
                    🔍 Performance tracking included
                </p>
            </div>
        """)

    return interface